# Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц: 3 на 2, 3 на 3, 2 на 4.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix
# (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем
# с первым элементом первой строки второй матрицы и т.д.
#

# class Matrix:
#     def __init__(self, matrix):
#         self.matrix = matrix
#
#     def __str__(self):  # без аргументов
#          return 'Матрица:\n' + '\n'.join('\t'.join(map(str, line)) for line in self.matrix)
#
#     def __add__(self, other):
#           result = [[self.matrix[i][j] + other.matrix[i][j] for j in range(len(self.matrix[0]))]
#                   for i in range(len(self.matrix))]
#         return result
#
#
# import random
#
# matrix = [[i for i in range(random.randrange(0, 9))] for i in range(random.randrange(0, 9))]
# inst = Matrix(matrix)
# print(inst)
# print(inst.matrix)


# Реализовать проект расчета суммарного расхода ткани на производство одежды.
# Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название.
# К типам одежды в этом проекте относятся пальто и костюм.
# У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма).
# Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды
# использовать формулы: для пальто (V/6.5 + 0.5), для костюма (2*H + 0.3).
# Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани.
# Проверить на практике полученные на этом
# уроке знания: реализовать абстрактные классы для основных классов проекта,
# проверить на практике работу декоратора @property.

class Clothes:
    def __init__(self, param):
        self.param = param

    def sum(self):

        pass


class Coat(Clothes):
    @property
    def calculation(self):
        return ((self.param / 6.5) + 0.5)


class Costume(Clothes):
    @property
    def calculation2(self):
        return ((self.param * 2) + 0.3)


coat = Coat(42)
costume = Costume(48)

print(coat.calculation)
print(costume.calculation2)
